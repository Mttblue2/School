import gmpy2
# import library
from gmpy2 import mpz

# set up parameters
c = mpz(654564125967811572957608485461509223541781197895608920296825435452302563551217882689453762450350456257099687251554693360645992257362168460115089842875072530869254099617858153458510730488327127628978127748004507636893613507344065845140647694349616219705757465949239924311260160127009283418952554522720051840260714703523494071411559772701875928237248989122625648657235677768486515417771976078417365256201505968603934443986411140514722785883888625061210731765750448)
n = mpz(1209143407476550975641959824312993703149920344437422193042293131572745298662696284279928622412441255652391493241414170537319784298367821654726781089600780498369402167443363862621886943970468819656731959468058528787895569936536904387979815183897568006750131879851263753496120098205966442010445601534305483783759226510120860633770814540166419495817666312474484061885435295870436055727722073738662516644186716532891328742452198364825809508602208516407566578212780807)

e = mpz(65537)

####################

# user fermat's algorithm to obtain p and q from n
a = gmpy2.isqrt(n)
b2 = gmpy2.mul(a,a) - n

while (not gmpy2.is_square(b2)):
    a = a + 1
    b2 = gmpy2.mul(a,a) - n

p = a - gmpy2.isqrt(b2)
q = a + gmpy2.isqrt(b2)

####################
# Decryption Process

phi = gmpy2.mul(p-1,q-1)
d = gmpy2.invert(e,phi)

m = gmpy2.powmod(c, d, n)

print("The private key component is:", d)
print("The original message is:", m)

print("The number of digits of the private key is:", gmpy2.num_digits(d))
